package Accounting.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.AbstractCellProvider;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Basic;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import java.awt.Color;

public class HorizontalLineCellProvider extends AbstractCellProvider {
  private SNode myNode;
  private int thickness;
  public HorizontalLineCellProvider(SNode node, int thickness) {
    if (thickness < 0) {
      throw new IllegalArgumentException();
    }
    this.myNode = node;
    this.thickness = thickness;
  }
  public EditorCell createEditorCell(EditorContext context) {
    EditorCell_Basic result = new EditorCell_Basic(context, HorizontalLineCellProvider.this.myNode) {
      public void paintContent(Graphics g, ParentSettings parentSettings) {
        if (this.isSelectionPaintedOnAncestor(parentSettings).isSelectionPainted()) {
          g.setColor(Color.WHITE);
        } else {
          g.setColor(Color.BLACK);
        }
        int x = this.getParent().getX();
        int width = this.getParent().getWidth();
        this.setWidth(width);
        this.setX(x);
        g.fillRect(x, this.getY() + 1, width, thickness);
      }
      public int getAscent() {
        return this.getPrevLeaf().getHeight() / 4;
      }
      public void relayoutImpl() {
        this.myWidth = 20;
        this.myHeight = 2 + thickness;
      }
    };
    return result;
  }
}

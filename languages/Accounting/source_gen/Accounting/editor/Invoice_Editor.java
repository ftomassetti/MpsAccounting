package Accounting.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.slisson.mps.tables.runtime.cells.TableEditor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import de.slisson.mps.hacks.editor.EditorCacheHacks;
import de.slisson.mps.tables.runtime.cells.ChildsTracker;
import de.slisson.mps.tables.runtime.cells.PartialTableExtractor;
import de.slisson.mps.tables.runtime.gridmodel.Grid;
import java.util.List;
import de.slisson.mps.tables.runtime.gridmodel.HeaderGrid;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.slisson.mps.tables.runtime.style.ITableStyleFactory;
import de.slisson.mps.tables.runtime.gridmodel.IHeaderNodeInsertAction;
import de.slisson.mps.tables.runtime.gridmodel.IHeaderNodeDeleteAction;
import de.slisson.mps.tables.runtime.gridmodel.HeaderGridFactory;
import de.slisson.mps.tables.runtime.gridmodel.Header;
import de.slisson.mps.tables.runtime.gridmodel.EditorCellHeader;
import de.slisson.mps.tables.runtime.gridmodel.StringHeaderReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import de.slisson.mps.tables.runtime.gridmodel.GridAdapter;
import de.slisson.mps.tables.runtime.gridmodel.GridElementFactory;
import de.slisson.mps.tables.runtime.gridmodel.IGridElement;
import de.slisson.mps.tables.runtime.substitute.CellQuerySubstituteInfo;
import de.slisson.mps.tables.runtime.cells.TableUtils;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.openapi.editor.cells.CellAction;
import org.apache.log4j.Logger;
import jetbrains.mps.nodeEditor.cells.EditorCell_Error;
import de.slisson.mps.tables.runtime.cells.PartialTableEditor;
import de.slisson.mps.tables.runtime.gridmodel.EditorCellGridLeaf;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import Accounting.behavior.InvoiceLine__BehaviorDescriptor;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import Accounting.behavior.Invoice__BehaviorDescriptor;

public class Invoice_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_mbkewv_a(editorContext, node);
  }
  private EditorCell createCollection_mbkewv_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_mbkewv_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mbkewv_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mbkewv_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_mbkewv_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_a0");
    editorCell.addEditorCell(this.createConstant_mbkewv_a0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mbkewv_b0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mbkewv_c0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mbkewv_d0a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_mbkewv_e0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mbkewv_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "invoice");
    editorCell.setCellId("Constant_mbkewv_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_mbkewv_b0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "#");
    editorCell.setCellId("Constant_mbkewv_b0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mbkewv_c0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("identifier");
    provider.setNoTargetText("<no identifier>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_identifier");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_mbkewv_d0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "on");
    editorCell.setCellId("Constant_mbkewv_d0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_mbkewv_e0a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new Invoice_Editor.emittedOnSingleRoleHandler_mbkewv_e0a(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ec6e7L, "emittedOn"), editorContext);
    return provider.createCell();
  }
  private class emittedOnSingleRoleHandler_mbkewv_e0a extends SingleRoleCellProvider {
    public emittedOnSingleRoleHandler_mbkewv_e0a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("emittedOn");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_emittedOn");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no emittedOn>";
    }
  }
  private EditorCell createCollection_mbkewv_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createIndentCell_mbkewv_a1a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mbkewv_b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createIndentCell_mbkewv_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createCollection_mbkewv_b1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_b1a");
    editorCell.addEditorCell(this.createCollection_mbkewv_a1b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mbkewv_b1b0(editorContext, node));
    editorCell.addEditorCell(this.createTable_mbkewv_c1b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_mbkewv_a1b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_a1b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_mbkewv_a0b1a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_mbkewv_b0b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_mbkewv_a0b1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_a0b1a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mbkewv_a0a1b0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_mbkewv_b0a1b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mbkewv_a0a1b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "emitter:");
    editorCell.setCellId("Constant_mbkewv_a0a1b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefCell_mbkewv_b0a1b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("emitter");
    provider.setNoTargetText("<no emitter>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Invoice_Editor._Inline_mbkewv_a1a0b1a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("emitter");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  public static class _Inline_mbkewv_a1a0b1a extends InlineCellProvider {
    public _Inline_mbkewv_a1a0b1a() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_mbkewv_a0b0a1b0(editorContext, node);
    }
    private EditorCell createProperty_mbkewv_a0b0a1b0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
        return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }
  private EditorCell createCollection_mbkewv_b0b1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_mbkewv_b0b1a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_mbkewv_a1a1b0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_mbkewv_b1a1b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mbkewv_a1a1b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "client:");
    editorCell.setCellId("Constant_mbkewv_a1a1b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefCell_mbkewv_b1a1b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("client");
    provider.setNoTargetText("<no client>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new Invoice_Editor._Inline_mbkewv_a1b0b1a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("client");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  public static class _Inline_mbkewv_a1b0b1a extends InlineCellProvider {
    public _Inline_mbkewv_a1b0b1a() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_mbkewv_a0b1a1b0(editorContext, node);
    }
    private EditorCell createProperty_mbkewv_a0b1a1b0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name_1");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
        return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }
  private EditorCell createConstant_mbkewv_b1b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_mbkewv_b1b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createTable_mbkewv_c1b0(final EditorContext editorContext, final SNode node) {

    final Wrappers._T<TableEditor> editorCell = new Wrappers._T<TableEditor>(null);
    _FunctionTypes._void_P0_E0 creator = new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        EditorCacheHacks.noCaching(editorContext, new Runnable() {
          public void run() {
            try {

              ChildsTracker.pushNewInstance();
              PartialTableExtractor.pushNewInstance();
              Grid grid = new Grid();

              // column headers 
              {
                List<HeaderGrid> headerGrids = new ArrayList<HeaderGrid>(0);
                grid.setColumnHeaders(headerGrids);
              }

              // row headers 
              {
                List<HeaderGrid> headerGrids = new ArrayList<HeaderGrid>(0);
                grid.setRowHeaders(headerGrids);
              }
              final Grid childGrid = createStaticVertical_mbkewv_a2b1a(editorContext, node);
              childGrid.setSpanX(Math.max(1, grid.getColumnHeadersSizeX()));
              childGrid.setSpanY(Math.max(1, grid.getRowHeadersSizeY()));
              grid.setElement(0, 0, childGrid);

              editorCell.value = new TableEditor(editorContext, node, grid);
              editorCell.value.setCellId("Table_mbkewv_c1b0");

              editorCell.value.init();
            } finally {
              PartialTableExtractor.popInstance();
              ChildsTracker.popInstance(true);
            }
          }
        });
      }
    };

    creator.invoke();

    return editorCell.value;

  }
  public Grid createStaticVertical_mbkewv_a2b1a(final EditorContext editorContext, final SNode node) {
    Grid grid = new Grid();
    grid.setColumnHeaders(0, 0, createHeaderCollection_mbkewv_a0c1b0(editorContext, node));

    List<Grid> childs = new ArrayList<Grid>(3);
    childs.add(createStaticHorizontal_mbkewv_a0c1b0(editorContext, node));
    childs.add(createTableCell_mbkewv_b0c1b0(editorContext, node));
    childs.add(createTableCellQuery_mbkewv_c0c1b0(editorContext, node));
    int maxWidth = grid.getColumnHeadersSizeX();
    for (Grid child : ListSequence.fromList(childs)) {
      maxWidth = Math.max(maxWidth, child.getSizeX());
    }
    for (int y = 0; y < childs.size(); y++) {
      if (maxWidth > 0) {
        childs.get(y).setSpanX(maxWidth);
      }
      grid.setElement(0, y, childs.get(y));
    }
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    grid.setStyle(style);
    return grid;
  }
  public HeaderGrid createHeaderCollection_mbkewv_a0c1b0(final EditorContext editorContext, final SNode node) {
    IHeaderNodeInsertAction insertAction = null;
    IHeaderNodeDeleteAction deleteAction = null;

    List<HeaderGrid> nodeList = new ArrayList<HeaderGrid>();
    nodeList.add(createStaticHeader_mbkewv_a0a2b1a(editorContext, node));
    nodeList.add(createStaticHeader_mbkewv_b0a2b1a(editorContext, node));
    nodeList.add(createStaticHeader_mbkewv_c0a2b1a(editorContext, node));
    nodeList.add(createStaticHeader_mbkewv_d0a2b1a(editorContext, node));
    nodeList.add(createStaticHeader_mbkewv_e0a2b1a(editorContext, node));

    return new HeaderGridFactory(editorContext, node, true).createFromHeaderGridList(nodeList);
  }
  public HeaderGrid createStaticHeader_mbkewv_a0a2b1a(final EditorContext editorContext, final SNode snode) {
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell_Constant cell = new EditorCell_Constant(editorContext, snode, "Description", false);
    Header header = new EditorCellHeader(new StringHeaderReference("Description"), cell);
    header.setLabel("Description");
    header.setStyle(style);
    HeaderGrid grid = new HeaderGrid();
    grid.setElement(0, 0, header);
    return grid;
  }
  public HeaderGrid createStaticHeader_mbkewv_b0a2b1a(final EditorContext editorContext, final SNode snode) {
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell_Constant cell = new EditorCell_Constant(editorContext, snode, "Amount", false);
    Header header = new EditorCellHeader(new StringHeaderReference("Amount"), cell);
    header.setLabel("Amount");
    header.setStyle(style);
    HeaderGrid grid = new HeaderGrid();
    grid.setElement(0, 0, header);
    return grid;
  }
  public HeaderGrid createStaticHeader_mbkewv_c0a2b1a(final EditorContext editorContext, final SNode snode) {
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell_Constant cell = new EditorCell_Constant(editorContext, snode, "VAT Rate", false);
    Header header = new EditorCellHeader(new StringHeaderReference("VAT Rate"), cell);
    header.setLabel("VAT Rate");
    header.setStyle(style);
    HeaderGrid grid = new HeaderGrid();
    grid.setElement(0, 0, header);
    return grid;
  }
  public HeaderGrid createStaticHeader_mbkewv_d0a2b1a(final EditorContext editorContext, final SNode snode) {
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell_Constant cell = new EditorCell_Constant(editorContext, snode, "VAT", false);
    Header header = new EditorCellHeader(new StringHeaderReference("VAT"), cell);
    header.setLabel("VAT");
    header.setStyle(style);
    HeaderGrid grid = new HeaderGrid();
    grid.setElement(0, 0, header);
    return grid;
  }
  public HeaderGrid createStaticHeader_mbkewv_e0a2b1a(final EditorContext editorContext, final SNode snode) {
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell_Constant cell = new EditorCell_Constant(editorContext, snode, "Total", false);
    Header header = new EditorCellHeader(new StringHeaderReference("Total"), cell);
    header.setLabel("Total");
    header.setStyle(style);
    HeaderGrid grid = new HeaderGrid();
    grid.setElement(0, 0, header);
    return grid;
  }
  public Grid createStaticHorizontal_mbkewv_a0c1b0(final EditorContext editorContext, final SNode node) {
    Grid grid = new Grid();
    grid.setRowHeaders(0, 0, createHeadQuery_mbkewv_a0a2b1a(editorContext, node));

    List<Grid> childs = new ArrayList<Grid>(1);
    childs.add(createTableCellQuery_mbkewv_a0a2b1a(editorContext, node));
    int maxHeight = grid.getRowHeadersSizeY();
    for (Grid child : ListSequence.fromList(childs)) {
      maxHeight = Math.max(maxHeight, child.getSizeY());
    }
    for (int x = 0; x < childs.size(); x++) {
      if (maxHeight > 0) {
        childs.get(x).setSpanY(maxHeight);
      }
      grid.setElement(x, 0, childs.get(x));
    }
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    grid.setStyle(style);
    return grid;
  }
  public HeaderGrid createHeadQuery_mbkewv_a0a2b1a(final EditorContext editorContext, final SNode node) {
    Object queryResult = new Object() {
      public Object query() {
        return ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ee0d4L, "lines"))).select(new ISelector<SNode, String>() {
          public String select(SNode it) {
            return Integer.toString(SNodeOperations.getIndexInParent(it) + 1);
          }
        });
      }
    }.query();
    IHeaderNodeInsertAction insertAction = new IHeaderNodeInsertAction() {
      public void insertNew(int index) {
        SNodeFactoryOperations.addNewChild(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ee0d4L, "lines"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, "Accounting.structure.InvoiceLine")));
      }
    };
    IHeaderNodeDeleteAction deleteAction = new IHeaderNodeDeleteAction() {
      public void delete(final int index) {
        if (ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ee0d4L, "lines"))).count() > 1) {
          ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ee0d4L, "lines"))).removeElementAt(index);
        }
      }
    };
    HeaderGrid grid = new HeaderGridFactory(editorContext, node, false).createFromObject(queryResult, new StringHeaderReference("4989694486378673577"), insertAction, deleteAction, 0, new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }, "Foo");

    return grid;
  }
  public Grid createTableCellQuery_mbkewv_a0a2b1a(final EditorContext editorContext, final SNode node) {
    final Grid grid = new Grid();
    final GridAdapter gridAdapter = new GridAdapter(grid, editorContext, node);

    final int sizeX = new Object() {
      public int getSizeX() {
        return 5;
      }
    }.getSizeX();
    final int sizeY = new Object() {
      public int getSizeY() {
        return ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ee0d4L, "lines"))).count();
      }
    }.getSizeY();

    try {
      editorContext.getCellFactory().pushCellContext();
      editorContext.getCellFactory().addCellContextHints();
      editorContext.getCellFactory().removeCellContextHints();
      new Object() {
        public void loadElements() {
          for (int xi = 0; xi < sizeX; xi++) {
            for (int yi = 0; yi < sizeY; yi++) {
              final int x = xi;
              final int y = yi;
              // EditorCell 
              Object queryResult_ = queryCellsSafely(node, x, y);
              grid.setElement(x, y, new GridElementFactory(editorContext, node, false, false, grid).create(queryResult_));

              // set headers 

              IGridElement currentGridElement = grid.getElement(x, y);

              // set substitute info 
              if (currentGridElement instanceof Grid && !(((Grid) currentGridElement).isEmpty())) {
                Grid currentGrid = ((Grid) currentGridElement);
                for (int indexX = 0; indexX < currentGrid.getSizeX(); indexX++) {
                  for (int indexY = 0; indexY < currentGrid.getSizeY(); indexY++) {
                    IGridElement listElement = currentGrid.getElement(indexX, indexY);
                    final int index = Math.max(indexX, indexY);

                    listElement.setSubstituteInfo(new CellQuerySubstituteInfo(editorContext, node, (queryResult_ instanceof SNode ? ((SNode) queryResult_) : SNodeOperations.cast(TableUtils.getSNode(listElement, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"))), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")) {
                      public SNode substituteNode(SNode currentNode, SNode newValue) {
                        return doSubstituteNode_mbkewv_a0a2b1a(node, x, y, index, editorContext, currentNode, newValue);
                      }
                    });

                    if (canCreate(x, y, index)) {
                      listElement.setInsertBeforeAction(new AbstractCellAction() {
                        public void execute(EditorContext p0) {
                          createNode(x, y, index);
                        }
                      });
                    }
                    if (canCreate(x, y, index + 1)) {
                      listElement.setInsertAction(new AbstractCellAction() {
                        public void execute(EditorContext p0) {
                          createNode(x, y, index + 1);
                        }
                      });
                    }
                  }
                }
              } else {
                gridAdapter.setSubstituteInfo(x, y, new CellQuerySubstituteInfo(editorContext, node, (queryResult_ instanceof SNode ? ((SNode) queryResult_) : SNodeOperations.cast(TableUtils.getSNode(currentGridElement, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"))), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")) {
                  public SNode substituteNode(SNode currentNode, SNode newValue) {
                    return doSubstituteNode_mbkewv_a0a2b1a(node, x, y, 0, editorContext, currentNode, newValue);
                  }
                });
                if (canCreate(x, y, 0)) {
                  currentGridElement = grid.getElement(x, y);

                  CellAction insertAction = new AbstractCellAction() {
                    public void execute(EditorContext p0) {
                      createNode(x, y, 0);
                    }
                  };
                  currentGridElement.setInsertBeforeAction(insertAction);
                  currentGridElement.setInsertAction(insertAction);
                }
              }

              // style 
              final Object queryResult = queryResult_;
              grid.getElement(x, y).setStyle(new ITableStyleFactory() {
                public Style createStyle(final int columnIndex, final int rowIndex) {
                  Style style = new StyleImpl();
                  return style;
                }
              }.createStyle(x, y));
            }
          }
        }
        public boolean canCreate(int columnIndex, int rowIndex, int listIndex) {
          return true;
        }
        public SNode createNode(int columnIndex, int rowIndex, int listIndex) {
          return doSubstituteNode_mbkewv_a0a2b1a(node, columnIndex, rowIndex, listIndex, editorContext, null, null);
        }

        public Object queryCellsSafely(final SNode node, final int columnIndex, final int rowIndex) {
          try {
            return queryCells(node, columnIndex, rowIndex);
          } catch (Exception ex) {
            Logger.getLogger(getClass()).error("Failed to query cell [" + rowIndex + ", " + columnIndex + "]", ex);
            return new EditorCell_Error(editorContext, node, "!exception! for [" + rowIndex + ", " + columnIndex + "]:" + ex.getMessage());
          }
        }

        private Object queryCells(final SNode node, final int columnIndex, final int rowIndex) {
          SNode line = ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db02fL, 0x453ef4b2e64ee0d4L, "lines"))).getElement(rowIndex);
          switch (columnIndex) {
            case 0:
              return new Invoice_Editor.CellCreateOperation_a0a0b0a0a0c1b0().create(editorContext, line);
            case 1:
              return new Invoice_Editor.CellCreateOperation_a0a1b0a0a0c1b0().create(editorContext, line);
            case 2:
              return new Invoice_Editor.CellCreateOperation_a0a2b0a0a0c1b0().create(editorContext, line);
            case 3:
              return new Invoice_Editor.CellCreateOperation_a0a3b0a0a0c1b0().create(editorContext, line);
            case 4:
              return new Invoice_Editor.CellCreateOperation_a0a4b0a0a0c1b0().create(editorContext, line);
            default:
              throw new RuntimeException("Invalid column index " + columnIndex);
          }
        }

      }.loadElements();

    } finally {
      editorContext.getCellFactory().popCellContext();
    }


    return grid;
  }
  public SNode doSubstituteNode_mbkewv_a0a2b1a(SNode node, int columnIndex, int rowIndex, int listIndex, EditorContext editorContext, SNode currentNode, SNode newValue) {
    currentNode = SNodeOperations.cast(currentNode, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
    newValue = SNodeOperations.cast(newValue, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
    return null;
  }
  public Grid createTableCell_mbkewv_b0c1b0(final EditorContext editorContext, final SNode node) {

    EditorCell cell = createCustom_mbkewv_a1a2b1a(editorContext, node);
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);

    Grid grid;
    if (cell instanceof PartialTableEditor) {
      grid = ((PartialTableEditor) cell).getGrid().clone();
    } else {
      grid = new Grid();
      EditorCellGridLeaf leaf = new EditorCellGridLeaf(cell);
      leaf.setStyle(style);
      grid.setElement(0, 0, leaf);
    }

    return grid;
  }
  private EditorCell createCustom_mbkewv_a1a2b1a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizontalLineCellProvider>() {
      public HorizontalLineCellProvider invoke() {
        return new HorizontalLineCellProvider(node, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_mbkewv_a1a2b1a");
    return editorCell;
  }
  public Grid createTableCellQuery_mbkewv_c0c1b0(final EditorContext editorContext, final SNode node) {
    final Grid grid = new Grid();
    final GridAdapter gridAdapter = new GridAdapter(grid, editorContext, node);

    final int sizeX = new Object() {
      public int getSizeX() {
        return 5;
      }
    }.getSizeX();
    final int sizeY = new Object() {
      public int getSizeY() {
        return 1;
      }
    }.getSizeY();

    try {
      editorContext.getCellFactory().pushCellContext();
      editorContext.getCellFactory().addCellContextHints();
      editorContext.getCellFactory().removeCellContextHints();
      new Object() {
        public void loadElements() {
          for (int xi = 0; xi < sizeX; xi++) {
            for (int yi = 0; yi < sizeY; yi++) {
              final int x = xi;
              final int y = yi;
              // EditorCell 
              Object queryResult_ = queryCellsSafely(node, x, y);
              grid.setElement(x, y, new GridElementFactory(editorContext, node, false, false, grid).create(queryResult_));

              // set headers 

              IGridElement currentGridElement = grid.getElement(x, y);

              // set substitute info 
              if (currentGridElement instanceof Grid && !(((Grid) currentGridElement).isEmpty())) {
                Grid currentGrid = ((Grid) currentGridElement);
                for (int indexX = 0; indexX < currentGrid.getSizeX(); indexX++) {
                  for (int indexY = 0; indexY < currentGrid.getSizeY(); indexY++) {
                    IGridElement listElement = currentGrid.getElement(indexX, indexY);
                    final int index = Math.max(indexX, indexY);

                    listElement.setSubstituteInfo(new CellQuerySubstituteInfo(editorContext, node, (queryResult_ instanceof SNode ? ((SNode) queryResult_) : SNodeOperations.cast(TableUtils.getSNode(listElement, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"))), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")) {
                      public SNode substituteNode(SNode currentNode, SNode newValue) {
                        return doSubstituteNode_mbkewv_c0c1b0(node, x, y, index, editorContext, currentNode, newValue);
                      }
                    });

                    if (canCreate(x, y, index)) {
                      listElement.setInsertBeforeAction(new AbstractCellAction() {
                        public void execute(EditorContext p0) {
                          createNode(x, y, index);
                        }
                      });
                    }
                    if (canCreate(x, y, index + 1)) {
                      listElement.setInsertAction(new AbstractCellAction() {
                        public void execute(EditorContext p0) {
                          createNode(x, y, index + 1);
                        }
                      });
                    }
                  }
                }
              } else {
                gridAdapter.setSubstituteInfo(x, y, new CellQuerySubstituteInfo(editorContext, node, (queryResult_ instanceof SNode ? ((SNode) queryResult_) : SNodeOperations.cast(TableUtils.getSNode(currentGridElement, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"))), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept")) {
                  public SNode substituteNode(SNode currentNode, SNode newValue) {
                    return doSubstituteNode_mbkewv_c0c1b0(node, x, y, 0, editorContext, currentNode, newValue);
                  }
                });
                if (canCreate(x, y, 0)) {
                  currentGridElement = grid.getElement(x, y);

                  CellAction insertAction = new AbstractCellAction() {
                    public void execute(EditorContext p0) {
                      createNode(x, y, 0);
                    }
                  };
                  currentGridElement.setInsertBeforeAction(insertAction);
                  currentGridElement.setInsertAction(insertAction);
                }
              }

              // style 
              final Object queryResult = queryResult_;
              grid.getElement(x, y).setStyle(new ITableStyleFactory() {
                public Style createStyle(final int columnIndex, final int rowIndex) {
                  Style style = new StyleImpl();
                  return style;
                }
              }.createStyle(x, y));
            }
          }
        }
        public boolean canCreate(int columnIndex, int rowIndex, int listIndex) {
          return true;
        }
        public SNode createNode(int columnIndex, int rowIndex, int listIndex) {
          return doSubstituteNode_mbkewv_c0c1b0(node, columnIndex, rowIndex, listIndex, editorContext, null, null);
        }

        public Object queryCellsSafely(final SNode node, final int columnIndex, final int rowIndex) {
          try {
            return queryCells(node, columnIndex, rowIndex);
          } catch (Exception ex) {
            Logger.getLogger(getClass()).error("Failed to query cell [" + rowIndex + ", " + columnIndex + "]", ex);
            return new EditorCell_Error(editorContext, node, "!exception! for [" + rowIndex + ", " + columnIndex + "]:" + ex.getMessage());
          }
        }

        private Object queryCells(final SNode node, final int columnIndex, final int rowIndex) {
          switch (columnIndex) {
            case 0:
              return new Invoice_Editor.CellCreateOperation_a0a0a0a2a2b1a().create(editorContext, node);
            case 1:
              return new Invoice_Editor.CellCreateOperation_a0a1a0a2a2b1a().create(editorContext, node);
            case 2:
              return new Invoice_Editor.CellCreateOperation_a0a2a0a2a2b1a().create(editorContext, node);
            case 3:
              return new Invoice_Editor.CellCreateOperation_a0a3a0a2a2b1a().create(editorContext, node);
            case 4:
              return new Invoice_Editor.CellCreateOperation_a0a4a0a2a2b1a().create(editorContext, node);
            default:
              throw new RuntimeException("Invalid column index " + columnIndex);
          }
        }

      }.loadElements();

    } finally {
      editorContext.getCellFactory().popCellContext();
    }


    return grid;
  }
  public SNode doSubstituteNode_mbkewv_c0c1b0(SNode node, int columnIndex, int rowIndex, int listIndex, EditorContext editorContext, SNode currentNode, SNode newValue) {
    currentNode = SNodeOperations.cast(currentNode, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
    newValue = SNodeOperations.cast(newValue, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
    return null;
  }
  private EditorCell createConstant_mbkewv_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_mbkewv_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  public static class CellCreateOperation_a0a0b0a0a0c1b0 {
    public CellCreateOperation_a0a0b0a0a0c1b0() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createProperty_mbkewv_a0a0a0a1a0a0a2b1a(editorContext, node);
    }
    private EditorCell createProperty_mbkewv_a0a0a0a1a0a0a2b1a(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("description");
      provider.setNoTargetText("<no description>");
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_description");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
        return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a1b0a0a0c1b0 {
    public CellCreateOperation_a0a1b0a0a0c1b0() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createCollection_mbkewv_a0a0a0b1a0a0a2b1a(editorContext, node);
    }
    private EditorCell createCollection_mbkewv_a0a0a0b1a0a0a2b1a(EditorContext editorContext, SNode node) {
      EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
      editorCell.setCellId("Collection_mbkewv_a0a0a0b1a0a0a2b1a");
      editorCell.addEditorCell(this.createRefNode_mbkewv_a0a0a0a1b0a0a0c1b0(editorContext, node));
      return editorCell;
    }
    private EditorCell createRefNode_mbkewv_a0a0a0a1b0a0a0c1b0(EditorContext editorContext, SNode node) {
      SingleRoleCellProvider provider = new Invoice_Editor.CellCreateOperation_a0a1b0a0a0c1b0.amountSingleRoleHandler_mbkewv_a0a0a0a1b0a0a0c1b0(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, 0x453ef4b2e64db1eeL, "amount"), editorContext);
      return provider.createCell();
    }
    private class amountSingleRoleHandler_mbkewv_a0a0a0a1b0a0a0c1b0 extends SingleRoleCellProvider {
      public amountSingleRoleHandler_mbkewv_a0a0a0a1b0a0a0c1b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
        super(ownerNode, containmentLink, context);
      }
      protected EditorCell createChildCell(SNode child) {
        EditorCell editorCell = super.createChildCell(child);
        installCellInfo(child, editorCell);
        return editorCell;
      }
      private void installCellInfo(SNode child, EditorCell editorCell) {
        editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
        if (editorCell.getRole() == null) {
          editorCell.setRole("amount");
        }
      }
      @Override
      protected EditorCell createEmptyCell() {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_amount");
        installCellInfo(null, editorCell);
        return editorCell;
      }
      protected String getNoTargetText() {
        return "<no amount>";
      }
    }
  }
  public static class CellCreateOperation_a0a2b0a0a0c1b0 {
    public CellCreateOperation_a0a2b0a0a0c1b0() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createCollection_mbkewv_a0a0a0c1a0a0a2b1a(editorContext, node);
    }
    private EditorCell createCollection_mbkewv_a0a0a0c1a0a0a2b1a(EditorContext editorContext, SNode node) {
      EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
      editorCell.setCellId("Collection_mbkewv_a0a0a0c1a0a0a2b1a");
      editorCell.addEditorCell(this.createRefNode_mbkewv_a0a0a0a2b0a0a0c1b0(editorContext, node));
      return editorCell;
    }
    private EditorCell createRefNode_mbkewv_a0a0a0a2b0a0a0c1b0(EditorContext editorContext, SNode node) {
      SingleRoleCellProvider provider = new Invoice_Editor.CellCreateOperation_a0a2b0a0a0c1b0.vatRateSingleRoleHandler_mbkewv_a0a0a0a2b0a0a0c1b0(node, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, 0x453ef4b2e64f0088L, "vatRate"), editorContext);
      return provider.createCell();
    }
    private class vatRateSingleRoleHandler_mbkewv_a0a0a0a2b0a0a0c1b0 extends SingleRoleCellProvider {
      public vatRateSingleRoleHandler_mbkewv_a0a0a0a2b0a0a0c1b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
        super(ownerNode, containmentLink, context);
      }
      protected EditorCell createChildCell(SNode child) {
        EditorCell editorCell = super.createChildCell(child);
        installCellInfo(child, editorCell);
        return editorCell;
      }
      private void installCellInfo(SNode child, EditorCell editorCell) {
        editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
        if (editorCell.getRole() == null) {
          editorCell.setRole("vatRate");
        }
      }
      @Override
      protected EditorCell createEmptyCell() {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_vatRate");
        installCellInfo(null, editorCell);
        return editorCell;
      }
      protected String getNoTargetText() {
        return "<no vatRate>";
      }
    }
  }
  public static class CellCreateOperation_a0a3b0a0a0c1b0 {
    public CellCreateOperation_a0a3b0a0a0c1b0() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createReadOnlyModelAccessor_mbkewv_a0a0a0d1a0a0a2b1a(editorContext, node);
    }
    private EditorCell createReadOnlyModelAccessor_mbkewv_a0a0a0d1a0a0a2b1a(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return "" + InvoiceLine__BehaviorDescriptor.vatAmount_id4kYXbbAlngZ.invoke(node);
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_mbkewv_a0a0a0d1a0a0a2b1a");
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a4b0a0a0c1b0 {
    public CellCreateOperation_a0a4b0a0a0c1b0() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createReadOnlyModelAccessor_mbkewv_a0a0a0e1a0a0a2b1a(editorContext, node);
    }
    private EditorCell createReadOnlyModelAccessor_mbkewv_a0a0a0e1a0a0a2b1a(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return "" + InvoiceLine__BehaviorDescriptor.total_id4kYXbbAlvrI.invoke(node);
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_mbkewv_a0a0a0e1a0a0a2b1a");
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a0a0a2a2b1a {
    public CellCreateOperation_a0a0a0a2a2b1a() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createConstant_mbkewv_a0a0a0a0a0c0c1b0(editorContext, node);
    }
    private EditorCell createConstant_mbkewv_a0a0a0a0a0c0c1b0(EditorContext editorContext, SNode node) {
      EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Total");
      editorCell.setCellId("Constant_mbkewv_a0a0a0a0a0c0c1b0");
      editorCell.setDefaultText("");
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a1a0a2a2b1a {
    public CellCreateOperation_a0a1a0a2a2b1a() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createReadOnlyModelAccessor_mbkewv_a0a0a0b0a0c0c1b0(editorContext, node);
    }
    private EditorCell createReadOnlyModelAccessor_mbkewv_a0a0a0b0a0c0c1b0(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return "" + Invoice__BehaviorDescriptor.totalAmount_id4kYXbbAm20u.invoke(node);
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_mbkewv_a0a0a0b0a0c0c1b0");
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a2a0a2a2b1a {
    public CellCreateOperation_a0a2a0a2a2b1a() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createReadOnlyModelAccessor_mbkewv_a0a0a0c0a0c0c1b0(editorContext, node);
    }
    private EditorCell createReadOnlyModelAccessor_mbkewv_a0a0a0c0a0c0c1b0(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return "---";
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_mbkewv_a0a0a0c0a0c0c1b0");
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a3a0a2a2b1a {
    public CellCreateOperation_a0a3a0a2a2b1a() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createReadOnlyModelAccessor_mbkewv_a0a0a0d0a0c0c1b0(editorContext, node);
    }
    private EditorCell createReadOnlyModelAccessor_mbkewv_a0a0a0d0a0c0c1b0(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return "" + Invoice__BehaviorDescriptor.totalVATAmount_id4kYXbbAm59V.invoke(node);
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_mbkewv_a0a0a0d0a0c0c1b0");
      return editorCell;
    }
  }
  public static class CellCreateOperation_a0a4a0a2a2b1a {
    public CellCreateOperation_a0a4a0a2a2b1a() {
    }
    public EditorCell create(EditorContext editorContext, SNode node) {
      return createReadOnlyModelAccessor_mbkewv_a0a0a0e0a0c0c1b0(editorContext, node);
    }
    private EditorCell createReadOnlyModelAccessor_mbkewv_a0a0a0e0a0c0c1b0(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return "" + Invoice__BehaviorDescriptor.total_id4kYXbbAm5Sy.invoke(node);
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_mbkewv_a0a0a0e0a0c0c1b0");
      return editorCell;
    }
  }
}

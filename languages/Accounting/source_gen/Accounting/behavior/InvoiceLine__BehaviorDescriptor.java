package Accounting.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.math.BigDecimal;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class InvoiceLine__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, "Accounting.structure.InvoiceLine");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<BigDecimal> vatAmount_id4kYXbbAlngZ = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("vatAmount").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4kYXbbAlngZ").registry(REGISTRY).build();
  public static final SMethod<BigDecimal> total_id4kYXbbAlvrI = new SMethodBuilder<BigDecimal>(new SJavaCompoundTypeImpl(BigDecimal.class)).name("total").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4kYXbbAlvrI").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(vatAmount_id4kYXbbAlngZ, total_id4kYXbbAlvrI);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static BigDecimal vatAmount_id4kYXbbAlngZ(@NotNull SNode __thisNode__) {
    BigDecimal p = BigDecimal.valueOf(0.01).multiply(BigDecimal.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, 0x453ef4b2e64f0088L, "vatRate")), MetaAdapterFactory.getProperty(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db1f0L, 0x453ef4b2e64f20f1L, "value"))));
    return p.multiply(Money__BehaviorDescriptor.asBigDecimal_id4kYXbbAlowJ.invoke(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, 0x453ef4b2e64db1eeL, "amount"))));
  }
  /*package*/ static BigDecimal total_id4kYXbbAlvrI(@NotNull SNode __thisNode__) {
    return Money__BehaviorDescriptor.asBigDecimal_id4kYXbbAlowJ.invoke(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x3511d2b0c9d74a02L, 0xa20bca10f21445c3L, 0x453ef4b2e64db08aL, 0x453ef4b2e64db1eeL, "amount"))).add(InvoiceLine__BehaviorDescriptor.vatAmount_id4kYXbbAlngZ.invoke(__thisNode__));
  }

  /*package*/ InvoiceLine__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((BigDecimal) vatAmount_id4kYXbbAlngZ(node));
      case 1:
        return (T) ((BigDecimal) total_id4kYXbbAlvrI(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
